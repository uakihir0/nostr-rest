// Package mopenapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package mopenapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Defines values for SourcePrivacy.
const (
	Direct   SourcePrivacy = "direct"
	Private  SourcePrivacy = "private"
	Public   SourcePrivacy = "public"
	Unlisted SourcePrivacy = "unlisted"
)

// Account defines model for Account.
type Account struct {
	// Acct The Webfinger account URI. Equal to username for local users, or username@domain for remote users.
	Acct string `json:"acct"`

	// Avatar An image icon that is shown next to statuses and in the profile. (URL)
	Avatar string `json:"avatar"`

	// AvatarStatic A static version of the avatar. Equal to avatar if its value is a static image; different if avatar is an animated GIF.
	AvatarStatic string `json:"avatar_static"`

	// Bot Indicates that the account may perform automated actions, may not be monitored, or identifies
	Bot bool `json:"bot"`

	// CreatedAt When the account was created. (ISO 8601)
	CreatedAt string `json:"created_at"`

	// Discoverable Whether the account has opted into discovery features such as the profile directory.
	Discoverable *bool `json:"discoverable"`

	// DisplayName The profile’s display name.
	DisplayName string `json:"display_name"`

	// Emojis Custom emoji entities to be used when rendering the profile.
	Emojis []CustomEmoji `json:"emojis"`

	// Fields Custom emoji entities to be used when rendering the profile.
	Fields []Field `json:"fields"`

	// FollowersCount The reported followers of this profile.
	FollowersCount int `json:"followers_count"`

	// FollowingCount The reported follows of this profile.
	FollowingCount int `json:"following_count"`

	// Group Indicates that the account represents a Group actor.
	Group bool `json:"group"`

	// Header An image banner that is shown above the profile and in profile cards.
	Header string `json:"header"`

	// HeaderStatic A static version of the header. Equal to header if its value is a static image; different if header is an animated GIF.
	HeaderStatic string `json:"header_static"`

	// Id The account id.
	Id string `json:"id"`

	// LastStatusAt When the most recent status was posted. (ISO 8601)
	LastStatusAt *string `json:"last_status_at"`

	// Limited An extra attribute returned only when an account is silenced. If true, indicates that the account should be hidden behind a warning screen.
	Limited *bool `json:"limited,omitempty"`

	// Locked Whether the account manually approves follow requests.
	Locked bool `json:"locked"`

	// Moved Indicates that the profile is currently inactive and that its user has moved to a new account.
	Moved *bool `json:"moved"`

	// Noindex Whether the local user has opted out of being indexed by search engines.
	Noindex *bool `json:"noindex"`

	// Note The profile’s bio or description. (HTML)
	Note string `json:"note"`

	// StatusesCount How many statuses are attached to this account.
	StatusesCount int `json:"statuses_count"`

	// Suspended An extra attribute returned only when an account is suspended.
	Suspended *bool `json:"suspended,omitempty"`

	// Url The location of the user’s profile page.
	Url string `json:"url"`

	// Username The username of the account, not including domain.
	Username string `json:"username"`
}

// CredentialAccount defines model for CredentialAccount.
type CredentialAccount struct {
	// Acct The Webfinger account URI. Equal to username for local users, or username@domain for remote users.
	Acct string `json:"acct"`

	// Avatar An image icon that is shown next to statuses and in the profile. (URL)
	Avatar string `json:"avatar"`

	// AvatarStatic A static version of the avatar. Equal to avatar if its value is a static image; different if avatar is an animated GIF.
	AvatarStatic string `json:"avatar_static"`

	// Bot Indicates that the account may perform automated actions, may not be monitored, or identifies
	Bot bool `json:"bot"`

	// CreatedAt When the account was created. (ISO 8601)
	CreatedAt string `json:"created_at"`

	// Discoverable Whether the account has opted into discovery features such as the profile directory.
	Discoverable *bool `json:"discoverable"`

	// DisplayName The profile’s display name.
	DisplayName string `json:"display_name"`

	// Emojis Custom emoji entities to be used when rendering the profile.
	Emojis []CustomEmoji `json:"emojis"`

	// Fields Custom emoji entities to be used when rendering the profile.
	Fields []Field `json:"fields"`

	// FollowersCount The reported followers of this profile.
	FollowersCount int `json:"followers_count"`

	// FollowingCount The reported follows of this profile.
	FollowingCount int `json:"following_count"`

	// Group Indicates that the account represents a Group actor.
	Group bool `json:"group"`

	// Header An image banner that is shown above the profile and in profile cards.
	Header string `json:"header"`

	// HeaderStatic A static version of the header. Equal to header if its value is a static image; different if header is an animated GIF.
	HeaderStatic string `json:"header_static"`

	// Id The account id.
	Id string `json:"id"`

	// LastStatusAt When the most recent status was posted. (ISO 8601)
	LastStatusAt *string `json:"last_status_at"`

	// Limited An extra attribute returned only when an account is silenced. If true, indicates that the account should be hidden behind a warning screen.
	Limited *bool `json:"limited,omitempty"`

	// Locked Whether the account manually approves follow requests.
	Locked bool `json:"locked"`

	// Moved Indicates that the profile is currently inactive and that its user has moved to a new account.
	Moved *bool `json:"moved"`

	// Noindex Whether the local user has opted out of being indexed by search engines.
	Noindex *bool `json:"noindex"`

	// Note The profile’s bio or description. (HTML)
	Note   string `json:"note"`
	Role   Role   `json:"role"`
	Source Source `json:"source"`

	// StatusesCount How many statuses are attached to this account.
	StatusesCount int `json:"statuses_count"`

	// Suspended An extra attribute returned only when an account is suspended.
	Suspended *bool `json:"suspended,omitempty"`

	// Url The location of the user’s profile page.
	Url string `json:"url"`

	// Username The username of the account, not including domain.
	Username string `json:"username"`
}

// CustomEmoji defines model for CustomEmoji.
type CustomEmoji struct {
	// Category Used for sorting custom emoji in the picker.
	Category string `json:"category"`

	// Shortcode The name of the custom emoji.
	Shortcode string `json:"shortcode"`

	// StaticUrl A link to a static copy of the custom emoji.
	StaticUrl string `json:"static_url"`

	// Url A link to the custom emoji.
	Url string `json:"url"`

	// VisibleInPicker Whether this Emoji should be visible in the picker or unlisted.
	VisibleInPicker bool `json:"visible_in_picker"`
}

// Field defines model for Field.
type Field struct {
	// Name The key of a given field’s key-value pair.
	Name string `json:"name"`

	// Value The value associated with the name key.
	Value string `json:"value"`

	// VerifiedAt Timestamp of when the server verified a URL value for a rel=“me” link.
	VerifiedAt *string `json:"verified_at"`
}

// Role defines model for Role.
type Role struct {
	// Color The hex code assigned to this role. If no hex code is assigned, the string will be empty.
	Color string `json:"color"`

	// Highlighted  Whether the role is publicly visible as a badge on user profiles.
	Highlighted bool `json:"highlighted"`

	// Id The ID of the Role in the database.
	Id int `json:"id"`

	// Name The name of the role.
	Name string `json:"name"`

	// Permissions A bitmask that represents the sum of all permissions granted to the role.
	Permissions int `json:"permissions"`
}

// Source defines model for Source.
type Source struct {
	// Fields Metadata about the account.
	Fields []Field `json:"fields"`

	// FollowRequestsCount The number of pending follow requests.
	FollowRequestsCount int `json:"follow_requests_count"`

	// Language The default posting language for new statuses. (ISO 639-1 language two-letter code) or empty string.
	Language string `json:"language"`

	// Note Profile bio, in plain-text instead of in HTML.
	Note string `json:"note"`

	// Privacy The default post privacy to be used for new statuses.
	Privacy SourcePrivacy `json:"privacy"`

	// Sensitive Whether new statuses should be marked sensitive by default.
	Sensitive bool `json:"sensitive"`
}

// SourcePrivacy The default post privacy to be used for new statuses.
type SourcePrivacy string

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// VerifyCredentials
	// (GET /m/api/v1/accounts/verify_credentials)
	GetMApiV1AccountsVerifyCredentials(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetMApiV1AccountsVerifyCredentials converts echo context to params.
func (w *ServerInterfaceWrapper) GetMApiV1AccountsVerifyCredentials(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetMApiV1AccountsVerifyCredentials(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/m/api/v1/accounts/verify_credentials", wrapper.GetMApiV1AccountsVerifyCredentials)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
