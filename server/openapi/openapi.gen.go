// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// User defines model for User.
type User struct {
	// User description
	About *string `json:"about,omitempty"`

	// User profile banner image url
	Banner *string `json:"banner,omitempty"`

	// User display name
	DisplayName *string `json:"display_name,omitempty"`

	// User name
	Name *string `json:"name,omitempty"`

	// User icon image url
	Picture *string `json:"picture,omitempty"`

	// User public key (user idenitifier)
	Pubkey string `json:"pubkey"`

	// User website url
	Website *string `json:"website,omitempty"`
}

// UserResponse defines model for UserResponse.
type UserResponse = User

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	// User list
	List []User `json:"list"`
}

// UsersPubKeyRequest defines model for UsersPubKeyRequest.
type UsersPubKeyRequest struct {
	// Public key of the user to retrieve
	Pubkeys []string `json:"pubkeys"`
}

// GetV1UsersParams defines parameters for GetV1Users.
type GetV1UsersParams struct {
	// Public key of the user to retrieve
	Pubkey string `form:"pubkey" json:"pubkey"`
}

// PostV1UsersJSONRequestBody defines body for PostV1Users for application/json ContentType.
type PostV1UsersJSONRequestBody UsersPubKeyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// GET Users Profiles
	// (GET /v1/users)
	GetV1Users(ctx echo.Context, params GetV1UsersParams) error
	// GET User Profiles
	// (POST /v1/users)
	PostV1Users(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1Users converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Users(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Users(ctx, params)
	return err
}

// PostV1Users converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1Users(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1Users(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/users", wrapper.GetV1Users)
	router.POST(baseURL+"/v1/users", wrapper.PostV1Users)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/5xVTW/iPBD+K9a876GVIgK7lyq3roQqtNUuArqXLlo5yQDTJrZrO7RRlf++shNCaJOi",
	"LRfi8Xw+M/P4FRKZKylQWAPRK2h8KtDYbzIl9II7g9rMi/g7lov6zkkTKSwK/8mVyijhlqQIH4wUTmaS",
	"HebcfSktFWrbOFNF/Iil/0zRJJqUM4MI5kWcUcIesWRyw+wOWWFQMyuZRqsJ9wgBkMXc2+b85RbF1u4g",
	"mozHAeQk2nMAtlQIERirSWyhagVca15CVQW+SNKYQnTfprRu9WT8gImFyv2crlFSmCMYi0bwTzD8r3ED",
	"EfwXHtEO61sTOqfgY51iMn3hucqQHTJwpfhufCqD00ZkVPfxNKLzzvxVB+zzqZ9B2Dvsg/d8wVXQVNCi",
	"7/6x1jMQ3a+DN4XxWBZDlXVFPWMScyHqAD22SssNZchqJUY53yIrdNbnKCWjMl7+ETzHoVRqFeZVelx8",
	"YDpkoiixhR6yokSKj7OuF2Go/ON+XvjNpBQFWdoQ6ss+b88YG7JD2TS3/an0LqgfILIZNi6gd55IbOT7",
	"kD+ksZotpssVu57P2A23+MxLtkS9R81+KhTX89lSYQIBmCLPuS4PVovpctHowzGBw9XqeLVHbepok9HY",
	"ASAVCq4IIvg6cqIAFLc7P6PhfhI6EP1hiz3j6pKhTdmB3WykZrxlRRlbTqI+NqM5Ah9UewKYpRDBDdpf",
	"E88YPrrmOVof9f5z9Os0nwrUrt56QA/N6XbM6gKDDvHk/GVWc8mBqw/H951fv+HbL+PxEAW1euEJKXvK",
	"aHt4M10xDwCb1yAZP+nSfIB5XmSWHA11wGdn0Tej3+LCTddUpEqSsMx4f4QpI8EW7bNajtjFSjK+l5Sy",
	"u8Uty/zLxTLKyfreXV6+6+Rcmk4rj290OYxO5xkPe97w6rNImzNQd5D2Cn7J+mbuVibcbb/jgAh21qoo",
	"DDMn3Eljo6vx1RiqdfU3AAD//0zTY+2hCAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
