// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Paging defines model for Paging.
type Paging struct {
	// Specify when to get future posts from this result
	FutureSinceTime string `json:"future_since_time"`

	// Specify when to get past posts from this result
	PastUntileTime string `json:"past_untile_time"`
}

// Post defines model for Post.
type Post struct {
	// Raw text of post content.
	Content string `json:"content"`

	// Time post was created (UTC)
	CreatedAt string `json:"created_at"`
	Id        string `json:"id"`
	User      User   `json:"user"`
}

// Posts defines model for Posts.
type Posts struct {
	// Number of list
	Count int `json:"count"`

	// Post list
	List []Post `json:"list"`
}

// User's PublicKeys
type Pubkeys = []string

// User defines model for User.
type User struct {
	// User description
	About *string `json:"about,omitempty"`

	// User profile banner image url
	Banner *string `json:"banner,omitempty"`

	// User display name
	DisplayName *string `json:"display_name,omitempty"`

	// User name
	Name *string `json:"name,omitempty"`

	// User icon image url
	Picture *string `json:"picture,omitempty"`

	// User public key (user idenitifier)
	Pubkey string `json:"pubkey"`

	// User website url
	Website *string `json:"website,omitempty"`
}

// Users defines model for Users.
type Users struct {
	// Number of list
	Count int `json:"count"`

	// User list
	List []User `json:"list"`
}

// MaxResultsParameter defines model for MaxResultsParameter.
type MaxResultsParameter = int

// PubkeyParameter defines model for PubkeyParameter.
type PubkeyParameter = string

// SinceTimeParameter defines model for SinceTimeParameter.
type SinceTimeParameter = string

// UntilTimePatameter defines model for UntilTimePatameter.
type UntilTimePatameter = string

// PubKeysResponse defines model for PubKeysResponse.
type PubKeysResponse struct {
	// Number of pubkeys
	Count int `json:"count"`

	// User's PublicKeys
	Pubkeys Pubkeys `json:"pubkeys"`
}

// UserResponse defines model for UserResponse.
type UserResponse = User

// UsersResponse defines model for UsersResponse.
type UsersResponse = Users

// UsersTimelineResponse defines model for UsersTimelineResponse.
type UsersTimelineResponse struct {
	Paging *Paging `json:"paging,omitempty"`
	Posts  Posts   `json:"posts"`

	// User's PublicKeys
	Pubkeys Pubkeys `json:"pubkeys"`
}

// UsersPubKeyRequest defines model for UsersPubKeyRequest.
type UsersPubKeyRequest struct {
	// Public key of the user to retrieve
	Pubkeys []string `json:"pubkeys"`
}

// GetV1TimelinesHomeParams defines parameters for GetV1TimelinesHome.
type GetV1TimelinesHomeParams struct {
	// Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`

	// Specifies the number of Posts to try and retrieve (default 20)
	MaxResults *MaxResultsParameter `form:"max_results,omitempty" json:"max_results,omitempty"`

	// Get posts after that time (include)
	SinceTime *SinceTimeParameter `form:"since_time,omitempty" json:"since_time,omitempty"`

	// Get posts up to that time (exclude)
	UntilTime *UntilTimePatameter `form:"until_time,omitempty" json:"until_time,omitempty"`
}

// GetV1TimelinesUserParams defines parameters for GetV1TimelinesUser.
type GetV1TimelinesUserParams struct {
	// Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`

	// Specifies the number of Posts to try and retrieve (default 20)
	MaxResults *MaxResultsParameter `form:"max_results,omitempty" json:"max_results,omitempty"`

	// Get posts after that time (include)
	SinceTime *SinceTimeParameter `form:"since_time,omitempty" json:"since_time,omitempty"`

	// Get posts up to that time (exclude)
	UntilTime *UntilTimePatameter `form:"until_time,omitempty" json:"until_time,omitempty"`
}

// GetV1UsersParams defines parameters for GetV1Users.
type GetV1UsersParams struct {
	// Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`
}

// GetV1UsersFollowersParams defines parameters for GetV1UsersFollowers.
type GetV1UsersFollowersParams struct {
	// Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`
}

// GetV1UsersFollowersPubkeysParams defines parameters for GetV1UsersFollowersPubkeys.
type GetV1UsersFollowersPubkeysParams struct {
	// Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`
}

// GetV1UsersFollowingParams defines parameters for GetV1UsersFollowing.
type GetV1UsersFollowingParams struct {
	// Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`
}

// GetV1UsersFollowingPubkeysParams defines parameters for GetV1UsersFollowingPubkeys.
type GetV1UsersFollowingPubkeysParams struct {
	// Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`
}

// PostV1UsersJSONRequestBody defines body for PostV1Users for application/json ContentType.
type PostV1UsersJSONRequestBody UsersPubKeyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Home Timeline
	// (GET /v1/timelines/home)
	GetV1TimelinesHome(ctx echo.Context, params GetV1TimelinesHomeParams) error
	// Get User Timeline
	// (GET /v1/timelines/user)
	GetV1TimelinesUser(ctx echo.Context, params GetV1TimelinesUserParams) error
	// GET User Profiles
	// (GET /v1/users)
	GetV1Users(ctx echo.Context, params GetV1UsersParams) error
	// GET Users Profiles
	// (POST /v1/users)
	PostV1Users(ctx echo.Context) error
	// Get User's Followers
	// (GET /v1/users/followers)
	GetV1UsersFollowers(ctx echo.Context, params GetV1UsersFollowersParams) error
	// Get User's Follower's PublicKeys
	// (GET /v1/users/followers/pubkeys)
	GetV1UsersFollowersPubkeys(ctx echo.Context, params GetV1UsersFollowersPubkeysParams) error
	// Get Following Users
	// (GET /v1/users/following)
	GetV1UsersFollowing(ctx echo.Context, params GetV1UsersFollowingParams) error
	// Get Following User's PublicKeys
	// (GET /v1/users/following/pubkeys)
	GetV1UsersFollowingPubkeys(ctx echo.Context, params GetV1UsersFollowingPubkeysParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1TimelinesHome converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1TimelinesHome(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1TimelinesHomeParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", ctx.QueryParams(), &params.MaxResults)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_results: %s", err))
	}

	// ------------- Optional query parameter "since_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "since_time", ctx.QueryParams(), &params.SinceTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since_time: %s", err))
	}

	// ------------- Optional query parameter "until_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "until_time", ctx.QueryParams(), &params.UntilTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until_time: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1TimelinesHome(ctx, params)
	return err
}

// GetV1TimelinesUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1TimelinesUser(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1TimelinesUserParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", ctx.QueryParams(), &params.MaxResults)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_results: %s", err))
	}

	// ------------- Optional query parameter "since_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "since_time", ctx.QueryParams(), &params.SinceTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since_time: %s", err))
	}

	// ------------- Optional query parameter "until_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "until_time", ctx.QueryParams(), &params.UntilTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until_time: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1TimelinesUser(ctx, params)
	return err
}

// GetV1Users converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Users(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Users(ctx, params)
	return err
}

// PostV1Users converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1Users(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1Users(ctx)
	return err
}

// GetV1UsersFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowersParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowers(ctx, params)
	return err
}

// GetV1UsersFollowersPubkeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowersPubkeys(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowersPubkeysParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowersPubkeys(ctx, params)
	return err
}

// GetV1UsersFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowing(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowingParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowing(ctx, params)
	return err
}

// GetV1UsersFollowingPubkeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowingPubkeys(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowingPubkeysParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowingPubkeys(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/timelines/home", wrapper.GetV1TimelinesHome)
	router.GET(baseURL+"/v1/timelines/user", wrapper.GetV1TimelinesUser)
	router.GET(baseURL+"/v1/users", wrapper.GetV1Users)
	router.POST(baseURL+"/v1/users", wrapper.PostV1Users)
	router.GET(baseURL+"/v1/users/followers", wrapper.GetV1UsersFollowers)
	router.GET(baseURL+"/v1/users/followers/pubkeys", wrapper.GetV1UsersFollowersPubkeys)
	router.GET(baseURL+"/v1/users/following", wrapper.GetV1UsersFollowing)
	router.GET(baseURL+"/v1/users/following/pubkeys", wrapper.GetV1UsersFollowingPubkeys)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"zv8aAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
