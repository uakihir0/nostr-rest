// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Paging defines model for Paging.
type Paging struct {
	// Specify when to get future posts from this result
	FutureSinceTime string `json:"future_since_time"`

	// Specify when to get past posts from this result
	PastUntileTime string `json:"past_untile_time"`
}

// Post defines model for Post.
type Post struct {
	// Raw text of post content.
	Content string `json:"content"`

	// Time post was created (UTC)
	CreatedAt string `json:"created_at"`
	Id        string `json:"id"`
	User      User   `json:"user"`
}

// Posts defines model for Posts.
type Posts struct {
	// Number of list
	Count int `json:"count"`

	// Post list
	List []Post `json:"list"`
}

// User's PublicKeys
type Pubkeys = []string

// User defines model for User.
type User struct {
	// User description
	About *string `json:"about,omitempty"`

	// User profile banner image url
	Banner *string `json:"banner,omitempty"`

	// User display name
	DisplayName *string `json:"display_name,omitempty"`

	// User name
	Name *string `json:"name,omitempty"`

	// User icon image url
	Picture *string `json:"picture,omitempty"`

	// User public key (user idenitifier)
	Pubkey string `json:"pubkey"`

	// User website url
	Website *string `json:"website,omitempty"`
}

// Users defines model for Users.
type Users struct {
	// Number of list
	Count int `json:"count"`

	// User list
	List []User `json:"list"`
}

// MaxResultsParameter defines model for MaxResultsParameter.
type MaxResultsParameter = int

// PubkeyParameter defines model for PubkeyParameter.
type PubkeyParameter = string

// SinceTimeParameter defines model for SinceTimeParameter.
type SinceTimeParameter = string

// UntilTimePatameter defines model for UntilTimePatameter.
type UntilTimePatameter = string

// PubKeysResponse defines model for PubKeysResponse.
type PubKeysResponse struct {
	// Number of pubkeys
	Count int `json:"count"`

	// User's PublicKeys
	Pubkeys Pubkeys `json:"pubkeys"`
}

// UserResponse defines model for UserResponse.
type UserResponse = User

// UsersResponse defines model for UsersResponse.
type UsersResponse = Users

// UsersTimelineResponse defines model for UsersTimelineResponse.
type UsersTimelineResponse struct {
	Paging *Paging `json:"paging,omitempty"`
	Posts  Posts   `json:"posts"`

	// User's PublicKeys
	Pubkeys Pubkeys `json:"pubkeys"`
}

// UsersPubKeyRequest defines model for UsersPubKeyRequest.
type UsersPubKeyRequest struct {
	// Public key of the user to retrieve
	Pubkeys []string `json:"pubkeys"`
}

// GetV1TimelinesHomeParams defines parameters for GetV1TimelinesHome.
type GetV1TimelinesHomeParams struct {
	// Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`

	// Specifies the number of Posts to try and retrieve (default 20)
	MaxResults *MaxResultsParameter `form:"max_results,omitempty" json:"max_results,omitempty"`

	// Get posts after that time (include)
	SinceTime *SinceTimeParameter `form:"since_time,omitempty" json:"since_time,omitempty"`

	// Get posts up to that time (exclude)
	UntilTime *UntilTimePatameter `form:"until_time,omitempty" json:"until_time,omitempty"`
}

// GetV1TimelinesUserParams defines parameters for GetV1TimelinesUser.
type GetV1TimelinesUserParams struct {
	// Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`

	// Specifies the number of Posts to try and retrieve (default 20)
	MaxResults *MaxResultsParameter `form:"max_results,omitempty" json:"max_results,omitempty"`

	// Get posts after that time (include)
	SinceTime *SinceTimeParameter `form:"since_time,omitempty" json:"since_time,omitempty"`

	// Get posts up to that time (exclude)
	UntilTime *UntilTimePatameter `form:"until_time,omitempty" json:"until_time,omitempty"`
}

// GetV1UsersParams defines parameters for GetV1Users.
type GetV1UsersParams struct {
	// Public key of the user to retrieve
	Pubkey string `form:"pubkey" json:"pubkey"`
}

// GetV1UsersFollowingParams defines parameters for GetV1UsersFollowing.
type GetV1UsersFollowingParams struct {
	// Public key of the user
	Pubkey string `form:"pubkey" json:"pubkey"`
}

// GetV1UsersFollowingPubkeysParams defines parameters for GetV1UsersFollowingPubkeys.
type GetV1UsersFollowingPubkeysParams struct {
	// Public key of the user
	Pubkey string `form:"pubkey" json:"pubkey"`
}

// PostV1UsersJSONRequestBody defines body for PostV1Users for application/json ContentType.
type PostV1UsersJSONRequestBody UsersPubKeyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Home Timeline
	// (GET /v1/timelines/home)
	GetV1TimelinesHome(ctx echo.Context, params GetV1TimelinesHomeParams) error
	// Get User Timeline
	// (GET /v1/timelines/user)
	GetV1TimelinesUser(ctx echo.Context, params GetV1TimelinesUserParams) error
	// GET Users Profiles
	// (GET /v1/users)
	GetV1Users(ctx echo.Context, params GetV1UsersParams) error
	// GET User Profiles
	// (POST /v1/users)
	PostV1Users(ctx echo.Context) error
	// Get Following Users
	// (GET /v1/users/following)
	GetV1UsersFollowing(ctx echo.Context, params GetV1UsersFollowingParams) error
	// Get Following User's PublicKeys
	// (GET /v1/users/following/pubkeys)
	GetV1UsersFollowingPubkeys(ctx echo.Context, params GetV1UsersFollowingPubkeysParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1TimelinesHome converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1TimelinesHome(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1TimelinesHomeParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", ctx.QueryParams(), &params.MaxResults)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_results: %s", err))
	}

	// ------------- Optional query parameter "since_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "since_time", ctx.QueryParams(), &params.SinceTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since_time: %s", err))
	}

	// ------------- Optional query parameter "until_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "until_time", ctx.QueryParams(), &params.UntilTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until_time: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1TimelinesHome(ctx, params)
	return err
}

// GetV1TimelinesUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1TimelinesUser(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1TimelinesUserParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", ctx.QueryParams(), &params.MaxResults)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_results: %s", err))
	}

	// ------------- Optional query parameter "since_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "since_time", ctx.QueryParams(), &params.SinceTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since_time: %s", err))
	}

	// ------------- Optional query parameter "until_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "until_time", ctx.QueryParams(), &params.UntilTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until_time: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1TimelinesUser(ctx, params)
	return err
}

// GetV1Users converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Users(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Users(ctx, params)
	return err
}

// PostV1Users converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1Users(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1Users(ctx)
	return err
}

// GetV1UsersFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowing(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowingParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowing(ctx, params)
	return err
}

// GetV1UsersFollowingPubkeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowingPubkeys(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowingPubkeysParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowingPubkeys(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/timelines/home", wrapper.GetV1TimelinesHome)
	router.GET(baseURL+"/v1/timelines/user", wrapper.GetV1TimelinesUser)
	router.GET(baseURL+"/v1/users", wrapper.GetV1Users)
	router.POST(baseURL+"/v1/users", wrapper.PostV1Users)
	router.GET(baseURL+"/v1/users/following", wrapper.GetV1UsersFollowing)
	router.GET(baseURL+"/v1/users/following/pubkeys", wrapper.GetV1UsersFollowingPubkeys)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
