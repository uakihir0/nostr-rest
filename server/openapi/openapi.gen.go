// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Post defines model for Post.
type Post struct {
	// Raw text of post content.
	Content string `json:"content"`

	// Time post was created (UTC)
	CreatedAt string `json:"created_at"`
	Id        string `json:"id"`
	User      User   `json:"user"`
}

// User defines model for User.
type User struct {
	// User description
	About *string `json:"about,omitempty"`

	// User profile banner image url
	Banner *string `json:"banner,omitempty"`

	// User display name
	DisplayName *string `json:"display_name,omitempty"`

	// User name
	Name *string `json:"name,omitempty"`

	// User icon image url
	Picture *string `json:"picture,omitempty"`

	// User public key (user idenitifier)
	Pubkey string `json:"pubkey"`

	// User website url
	Website *string `json:"website,omitempty"`
}

// EndTimePatameter defines model for EndTimePatameter.
type EndTimePatameter = string

// MaxResultsParameter defines model for MaxResultsParameter.
type MaxResultsParameter = int

// PubkeyParameter defines model for PubkeyParameter.
type PubkeyParameter = string

// StartTimeParameter defines model for StartTimeParameter.
type StartTimeParameter = string

// PostsResponse defines model for PostsResponse.
type PostsResponse struct {
	// Number of list
	Count int `json:"count"`

	// Post list
	List []Post `json:"list"`
}

// PubKeysResponse defines model for PubKeysResponse.
type PubKeysResponse struct {
	// User's PublicKeys
	Pubkeys []string `json:"pubkeys"`
}

// UserResponse defines model for UserResponse.
type UserResponse = User

// UsersResponse defines model for UsersResponse.
type UsersResponse struct {
	// Number of list
	Count int `json:"count"`

	// User list
	List []User `json:"list"`
}

// UsersPubKeyRequest defines model for UsersPubKeyRequest.
type UsersPubKeyRequest struct {
	// Public key of the user to retrieve
	Pubkeys []string `json:"pubkeys"`
}

// GetV1TimelinesHomeParams defines parameters for GetV1TimelinesHome.
type GetV1TimelinesHomeParams struct {
	// Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`

	// Specifies the number of Posts to try and retrieve (default 20)
	MaxResults *MaxResultsParameter `form:"max_results,omitempty" json:"max_results,omitempty"`

	// The oldest or earliest UTC timestamp from which the Posts will be provided
	StartTime *StartTimeParameter `form:"start_time,omitempty" json:"start_time,omitempty"`

	// The newest or most recent UTC timestamp from which the Posts will be provided
	EndTime *EndTimePatameter `form:"end_time,omitempty" json:"end_time,omitempty"`
}

// GetV1TimelinesUserParams defines parameters for GetV1TimelinesUser.
type GetV1TimelinesUserParams struct {
	// Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`

	// Specifies the number of Posts to try and retrieve (default 20)
	MaxResults *MaxResultsParameter `form:"max_results,omitempty" json:"max_results,omitempty"`

	// The oldest or earliest UTC timestamp from which the Posts will be provided
	StartTime *StartTimeParameter `form:"start_time,omitempty" json:"start_time,omitempty"`

	// The newest or most recent UTC timestamp from which the Posts will be provided
	EndTime *EndTimePatameter `form:"end_time,omitempty" json:"end_time,omitempty"`
}

// GetV1UsersParams defines parameters for GetV1Users.
type GetV1UsersParams struct {
	// Public key of the user to retrieve
	Pubkey string `form:"pubkey" json:"pubkey"`
}

// GetV1UsersFollowingParams defines parameters for GetV1UsersFollowing.
type GetV1UsersFollowingParams struct {
	// Public key of the user
	Pubkey string `form:"pubkey" json:"pubkey"`
}

// GetV1UsersFollowingPubkeysParams defines parameters for GetV1UsersFollowingPubkeys.
type GetV1UsersFollowingPubkeysParams struct {
	// Public key of the user
	Pubkey string `form:"pubkey" json:"pubkey"`
}

// PostV1UsersJSONRequestBody defines body for PostV1Users for application/json ContentType.
type PostV1UsersJSONRequestBody UsersPubKeyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get Home Timeline
	// (GET /v1/timelines/home)
	GetV1TimelinesHome(ctx echo.Context, params GetV1TimelinesHomeParams) error
	// Get User Timeline
	// (GET /v1/timelines/user)
	GetV1TimelinesUser(ctx echo.Context, params GetV1TimelinesUserParams) error
	// GET Users Profiles
	// (GET /v1/users)
	GetV1Users(ctx echo.Context, params GetV1UsersParams) error
	// GET User Profiles
	// (POST /v1/users)
	PostV1Users(ctx echo.Context) error
	// Get Following Users
	// (GET /v1/users/following)
	GetV1UsersFollowing(ctx echo.Context, params GetV1UsersFollowingParams) error
	// Get Following User's PublicKeys
	// (GET /v1/users/following/pubkeys)
	GetV1UsersFollowingPubkeys(ctx echo.Context, params GetV1UsersFollowingPubkeysParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetV1TimelinesHome converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1TimelinesHome(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1TimelinesHomeParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", ctx.QueryParams(), &params.MaxResults)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_results: %s", err))
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_time: %s", err))
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_time: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1TimelinesHome(ctx, params)
	return err
}

// GetV1TimelinesUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1TimelinesUser(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1TimelinesUserParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", ctx.QueryParams(), &params.MaxResults)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_results: %s", err))
	}

	// ------------- Optional query parameter "start_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "start_time", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter start_time: %s", err))
	}

	// ------------- Optional query parameter "end_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "end_time", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter end_time: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1TimelinesUser(ctx, params)
	return err
}

// GetV1Users converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Users(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Users(ctx, params)
	return err
}

// PostV1Users converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1Users(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1Users(ctx)
	return err
}

// GetV1UsersFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowing(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowingParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowing(ctx, params)
	return err
}

// GetV1UsersFollowingPubkeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowingPubkeys(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowingPubkeysParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowingPubkeys(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/timelines/home", wrapper.GetV1TimelinesHome)
	router.GET(baseURL+"/v1/timelines/user", wrapper.GetV1TimelinesUser)
	router.GET(baseURL+"/v1/users", wrapper.GetV1Users)
	router.POST(baseURL+"/v1/users", wrapper.PostV1Users)
	router.GET(baseURL+"/v1/users/following", wrapper.GetV1UsersFollowing)
	router.GET(baseURL+"/v1/users/following/pubkeys", wrapper.GetV1UsersFollowingPubkeys)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY32/bNhD+VwhuQBNAi+w4rRu/dUXWBe02w3H2kgUBJZ1ithLJkCfbWuD/fSApy78k",
	"O/PysAF7s/jzu++7O975mcYyV1KAQEMHz1QxzXJA0O7rSiRjnsOQoR+0YwmYWHOFXAo6oOMJEAEzMEik",
	"Jrk0SDTEIJDcjj8S5DkYZLkiqZY5mU14PCE4ATKUBg2Z8SwjERCl5ZQnkNCAcnvoUwG6pAEVLAc6oCCS",
	"B3sSDaiJJ5AzCwNLZecMai4e6WIR0F/YfASmyNAMl0bs4r1REPOUg3EwRJFHoIlMK0AoCeqSMJEQDag5",
	"TIGcJJCyIkNy3jltAZiz+YP2V29gzNmc50VOB+edTkBzLvxXN1ii5wLhEbSDPyyib1DugT4soozH5BuU",
	"FrCFXxjQLZCUO40GVMNTwTUkdIC6gP0M3iDT6AXX+wSXWVIJDkxn3P5+PbWNBXFY74U3DQz+KBMOzl1v",
	"DWgzLKLPUI78nB2NpUAQ7idTKuMxs6aEX42155nCnOUq8wdc+d+kaz+mLCvAxYTj0tDBHe333wG7uOj1",
	"e28veu+7afeC9c87EfTii/67y14/iaF//rYPSbfT78HbC9a9PE+i+PIy7UV9iGN675CvzFJaKtBYGVDf",
	"9DLtrb8u/dSyiZCbyu++gHjECR10K8+rv4NtJusBpjUr6ZJY7zN3NaT7ep2MvkKMVgK/1igpjMfvhB5V",
	"Iy/gvo2HWBZ+0yYLv9bhmnGDdDeMAuomdumzeanaU7P0vYaUDuh34SoDhh6QCe2Gg9RUB3qwTfwEWzCo",
	"D/PPUL4GSa3OYsPgjSHeZ+xl61a/nvpN1tmrjzJtnxj20H0X/hs9zuL6Wx7njXx9j6uzTR2gTcbXnG1u",
	"H7EZQZijJUDZGKpWntGGNBJrYAjJA2s4yD4q/oQZM6RaSU5uxx9Pm47iSaOruvfuZc6yyRtPHGveyuqc",
	"DcCWS44ZVLmCblMb0PkPBqXK+OPEmWcR0j9lZ4ZpZJ76+NRzl95WCFePyt19sMU2i2TR5jHrQw28REyI",
	"pkfZ7VVapjwD4hcRnrNHIIXOmg5KuFEZKx/8m9sMxS8hbknDEXu2tm1RPMZCt+3isRT7UVdFTYv5qyfy",
	"xD2OPAHB0RZ7utHJZhAZjm1oqtlmKI1Zct2Jbr2HNcQnF6lsyDPSoCajq5sx+TC8Jp8YwoyV5Ab0FDT5",
	"TYH4MLy2tautiYo8Z7pc7hpd3Yyq9XQFYDk1Xk1NQRt/W/esYwmQCgRTnA5o78wOBVQxnDgfDafd0JZg",
	"GRdgwon0Uj9Cg99+AnSRbWySsMTb0pqhK1JMVW0nvlxJZZbJmbHZwwaEy8zXiT/j9+54ed/P0rnPeity",
	"1xz0qyXhdvm8CA5uaWoYXrCtoUp+wa6dVmpxv1U8nXc6bcmtXhduVlguu9fuYJWw3JElk25+U8plCm2V",
	"0spWy7mr4SHtKsf/X7sjtHN5Z0c7F1Ktkvl+tlzLfiaVmrC6P5ARMi78Z/VCtGjoSqld7Y5pRI5rSHM2",
	"v/al0rJrWX7uJuCjBNioTrf4vxo7/g0ZepKMe3Ck2cN5XmTIbbu4Rj45yL45+0Oc2CR/JRIlucC1COOC",
	"jOqmtjwjJ2NJ2FTyhNyOvpDM9XAk4zlHp93p6Y6S1sdWUq465LKdnbUmOmzooBfHMm0OUL3G9Lqrh/6V",
	"sDLvy1P+pfFrISFR+fJk5cD9VN9ylMe/3t8u96/OLyCprfNO3cZwuNZD7mX6jdly8n9M+7C6+b/I/nYP",
	"f4j/zWbc/wPkKrsmi7/ImNmS0xaeAzpBVIMwzOzgRBocvO+879DF/eKvAAAA///VfPuruRUAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
