// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package openapi

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// Keys defines model for Keys.
type Keys struct {
	Public string `json:"public"`
	Secret string `json:"secret"`
}

// Paging defines model for Paging.
type Paging struct {
	// FutureSinceTime Specify when to get future posts from this result
	FutureSinceTime string `json:"future_since_time"`

	// PastUntileTime Specify when to get past posts from this result
	PastUntileTime string `json:"past_untile_time"`
}

// Post defines model for Post.
type Post struct {
	// Content Raw text of post content.
	Content string `json:"content"`

	// CreatedAt Time post was created (UTC)
	CreatedAt string `json:"created_at"`
	Id        string `json:"id"`
	User      User   `json:"user"`
}

// Posts defines model for Posts.
type Posts struct {
	// Count Number of list
	Count int `json:"count"`

	// List Post list
	List []Post `json:"list"`
}

// Pubkeys User's PublicKeys
type Pubkeys = []string

// User defines model for User.
type User struct {
	// About User description
	About *string `json:"about,omitempty"`

	// Banner User profile banner image url
	Banner *string `json:"banner,omitempty"`

	// DisplayName User display name
	DisplayName *string `json:"display_name,omitempty"`

	// Name User name
	Name *string `json:"name,omitempty"`

	// Picture User icon image url
	Picture *string `json:"picture,omitempty"`

	// Pubkey User public key (user idenitifier)
	Pubkey string `json:"pubkey"`

	// Website User website url
	Website *string `json:"website,omitempty"`
}

// Users defines model for Users.
type Users struct {
	// Count Number of list
	Count int `json:"count"`

	// List User list
	List []User `json:"list"`
}

// MaxResultsParameter defines model for MaxResultsParameter.
type MaxResultsParameter = int

// PubkeyParameter defines model for PubkeyParameter.
type PubkeyParameter = string

// SinceTimeParameter defines model for SinceTimeParameter.
type SinceTimeParameter = string

// UntilTimePatameter defines model for UntilTimePatameter.
type UntilTimePatameter = string

// PubKeysResponse defines model for PubKeysResponse.
type PubKeysResponse struct {
	// Count Number of pubkeys
	Count int `json:"count"`

	// Pubkeys User's PublicKeys
	Pubkeys Pubkeys `json:"pubkeys"`
}

// UserResponse defines model for UserResponse.
type UserResponse = User

// UsersResponse defines model for UsersResponse.
type UsersResponse = Users

// UsersTimelineResponse defines model for UsersTimelineResponse.
type UsersTimelineResponse struct {
	Paging *Paging `json:"paging,omitempty"`
	Posts  Posts   `json:"posts"`

	// Pubkeys User's PublicKeys
	Pubkeys Pubkeys `json:"pubkeys"`
}

// PostCommentRequest defines model for PostCommentRequest.
type PostCommentRequest struct {
	Keys Keys   `json:"keys"`
	Text string `json:"text"`
}

// UsersPubKeyRequest defines model for UsersPubKeyRequest.
type UsersPubKeyRequest struct {
	// Pubkeys Public key of the user to retrieve
	Pubkeys []string `json:"pubkeys"`
}

// PostV1PostsJSONBody defines parameters for PostV1Posts.
type PostV1PostsJSONBody struct {
	Keys Keys   `json:"keys"`
	Text string `json:"text"`
}

// GetV1TimelinesHomeParams defines parameters for GetV1TimelinesHome.
type GetV1TimelinesHomeParams struct {
	// Pubkey Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`

	// MaxResults Specifies the number of Posts to try and retrieve (default 20)
	MaxResults *MaxResultsParameter `form:"max_results,omitempty" json:"max_results,omitempty"`

	// SinceTime Get posts after that time (include)
	SinceTime *SinceTimeParameter `form:"since_time,omitempty" json:"since_time,omitempty"`

	// UntilTime Get posts up to that time (exclude)
	UntilTime *UntilTimePatameter `form:"until_time,omitempty" json:"until_time,omitempty"`
}

// GetV1TimelinesUserParams defines parameters for GetV1TimelinesUser.
type GetV1TimelinesUserParams struct {
	// Pubkey Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`

	// MaxResults Specifies the number of Posts to try and retrieve (default 20)
	MaxResults *MaxResultsParameter `form:"max_results,omitempty" json:"max_results,omitempty"`

	// SinceTime Get posts after that time (include)
	SinceTime *SinceTimeParameter `form:"since_time,omitempty" json:"since_time,omitempty"`

	// UntilTime Get posts up to that time (exclude)
	UntilTime *UntilTimePatameter `form:"until_time,omitempty" json:"until_time,omitempty"`
}

// GetV1UsersParams defines parameters for GetV1Users.
type GetV1UsersParams struct {
	// Pubkey Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`
}

// PostV1UsersJSONBody defines parameters for PostV1Users.
type PostV1UsersJSONBody struct {
	// Pubkeys Public key of the user to retrieve
	Pubkeys []string `json:"pubkeys"`
}

// GetV1UsersFollowersParams defines parameters for GetV1UsersFollowers.
type GetV1UsersFollowersParams struct {
	// Pubkey Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`
}

// GetV1UsersFollowersPubkeysParams defines parameters for GetV1UsersFollowersPubkeys.
type GetV1UsersFollowersPubkeysParams struct {
	// Pubkey Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`
}

// GetV1UsersFollowingParams defines parameters for GetV1UsersFollowing.
type GetV1UsersFollowingParams struct {
	// Pubkey Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`
}

// GetV1UsersFollowingPubkeysParams defines parameters for GetV1UsersFollowingPubkeys.
type GetV1UsersFollowingPubkeysParams struct {
	// Pubkey Public key of the user
	Pubkey PubkeyParameter `form:"pubkey" json:"pubkey"`
}

// PostV1PostsJSONRequestBody defines body for PostV1Posts for application/json ContentType.
type PostV1PostsJSONRequestBody PostV1PostsJSONBody

// PostV1UsersJSONRequestBody defines body for PostV1Users for application/json ContentType.
type PostV1UsersJSONRequestBody PostV1UsersJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Post Comment
	// (POST /v1/posts)
	PostV1Posts(ctx echo.Context) error
	// Get Home Timeline
	// (GET /v1/timelines/home)
	GetV1TimelinesHome(ctx echo.Context, params GetV1TimelinesHomeParams) error
	// Get User Timeline
	// (GET /v1/timelines/user)
	GetV1TimelinesUser(ctx echo.Context, params GetV1TimelinesUserParams) error
	// GET User Profiles
	// (GET /v1/users)
	GetV1Users(ctx echo.Context, params GetV1UsersParams) error
	// GET Users Profiles
	// (POST /v1/users)
	PostV1Users(ctx echo.Context) error
	// Get User's Followers
	// (GET /v1/users/followers)
	GetV1UsersFollowers(ctx echo.Context, params GetV1UsersFollowersParams) error
	// Get User's Follower's PublicKeys
	// (GET /v1/users/followers/pubkeys)
	GetV1UsersFollowersPubkeys(ctx echo.Context, params GetV1UsersFollowersPubkeysParams) error
	// Get Following Users
	// (GET /v1/users/following)
	GetV1UsersFollowing(ctx echo.Context, params GetV1UsersFollowingParams) error
	// Get Following User's PublicKeys
	// (GET /v1/users/following/pubkeys)
	GetV1UsersFollowingPubkeys(ctx echo.Context, params GetV1UsersFollowingPubkeysParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostV1Posts converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1Posts(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1Posts(ctx)
	return err
}

// GetV1TimelinesHome converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1TimelinesHome(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1TimelinesHomeParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", ctx.QueryParams(), &params.MaxResults)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_results: %s", err))
	}

	// ------------- Optional query parameter "since_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "since_time", ctx.QueryParams(), &params.SinceTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since_time: %s", err))
	}

	// ------------- Optional query parameter "until_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "until_time", ctx.QueryParams(), &params.UntilTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until_time: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1TimelinesHome(ctx, params)
	return err
}

// GetV1TimelinesUser converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1TimelinesUser(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1TimelinesUserParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// ------------- Optional query parameter "max_results" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_results", ctx.QueryParams(), &params.MaxResults)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_results: %s", err))
	}

	// ------------- Optional query parameter "since_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "since_time", ctx.QueryParams(), &params.SinceTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter since_time: %s", err))
	}

	// ------------- Optional query parameter "until_time" -------------

	err = runtime.BindQueryParameter("form", true, false, "until_time", ctx.QueryParams(), &params.UntilTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter until_time: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1TimelinesUser(ctx, params)
	return err
}

// GetV1Users converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1Users(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1Users(ctx, params)
	return err
}

// PostV1Users converts echo context to params.
func (w *ServerInterfaceWrapper) PostV1Users(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostV1Users(ctx)
	return err
}

// GetV1UsersFollowers converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowers(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowersParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowers(ctx, params)
	return err
}

// GetV1UsersFollowersPubkeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowersPubkeys(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowersPubkeysParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowersPubkeys(ctx, params)
	return err
}

// GetV1UsersFollowing converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowing(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowingParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowing(ctx, params)
	return err
}

// GetV1UsersFollowingPubkeys converts echo context to params.
func (w *ServerInterfaceWrapper) GetV1UsersFollowingPubkeys(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV1UsersFollowingPubkeysParams
	// ------------- Required query parameter "pubkey" -------------

	err = runtime.BindQueryParameter("form", true, true, "pubkey", ctx.QueryParams(), &params.Pubkey)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter pubkey: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetV1UsersFollowingPubkeys(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/v1/posts", wrapper.PostV1Posts)
	router.GET(baseURL+"/v1/timelines/home", wrapper.GetV1TimelinesHome)
	router.GET(baseURL+"/v1/timelines/user", wrapper.GetV1TimelinesUser)
	router.GET(baseURL+"/v1/users", wrapper.GetV1Users)
	router.POST(baseURL+"/v1/users", wrapper.PostV1Users)
	router.GET(baseURL+"/v1/users/followers", wrapper.GetV1UsersFollowers)
	router.GET(baseURL+"/v1/users/followers/pubkeys", wrapper.GetV1UsersFollowersPubkeys)
	router.GET(baseURL+"/v1/users/following", wrapper.GetV1UsersFollowing)
	router.GET(baseURL+"/v1/users/following/pubkeys", wrapper.GetV1UsersFollowingPubkeys)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY3W7juBV+FYItMAkgxJL/ZPtuu0ing0y7hpPszTQIKOnI5o5EakkqiRH43QuSkizb",
	"lO1JdjBz0Stb0iH5ne/88xXHPC84A6Yknr3iggiSgwJhnv5NXhYgy0zJef1ev05AxoIWinKGZ/i2gJim",
	"FCRSK0CszCMQiKdozqWSSHGkxBoRliABSlB4AnSRQErKTKG+f4k9TPUuf5Yg1tjDjOSAZzgnL4/CHo09",
	"LOMV5MQebVbiWd/3tBDNy1w/6CfK7FPgYbUu9C6UKViCwJuNh+dl9BXWR/SYl1FGY/QV1hq91qWUIDrw",
	"FWY37GEBf5ZUQIJnSpTQhgovJC8yLRyGYyDD4SAcjIaDSZAGQxL2/QgG8TAcTwdhEkPYH4WQBH44gNGQ",
	"BNN+EsXTaTqIQohj3CgklaBsafS5pSyGO5rDEZU+gkKFMQNJFQikVkQhRXNAF5TFWZlAF/9S7/6oRXfo",
	"P4RxzxTNLAx1GkZZGIfYwoCXozBKvftpGBtrB5DqHzyhYHxXu9+vPM+BqYX9pt/GnClg5i8piozGRGPs",
	"/SE10NfWEYXgBQhVbfYV1ub37wJSPMN/622jpmfXyN6Nltl4WMGLcnO19ZUvVsqzGz809uXRHxArrZGm",
	"VoKQ8zK6gfX5GlReZ9Be2/8o0A9PJCvBaGZcV2oQ73bMBwO0i7XmpPNCTbtGnSO0PyjIzdqcvHwGtlQr",
	"PAuqQG+eDyKjeUGEIOsD2mtITsqNrCw4k5ULGe7lonr3Dv+JeWkX7fLwnyZZ1rgOU5fXpvGY/80rsS6V",
	"vQqFS3VvDxiu3O9Nqh8DqTc9dqD8LifKo0fq7JVRBn+BnQuy1F54ylJWSptWZ8WT4kboL3AEs493NAb2",
	"SapTSB0XeBvvBsdNhWebdr6YuM9ojGc4GffTCRkPxmE8TciQjMZDMiUkGfhJkCaTMUnJOPDjfj+MwA+i",
	"cDQOw2GakMgfAZmmuvBJiAUoPMODIB5DOIoDP56kPhlBOJr2oT8iMPYjGAU+xGQ0GSd9PxhFEI7T/nSS",
	"DuLBcJyM/LQf482Dd5ifDM7XwyRSH3sqjVdbNAs0p1SZqn+zE881xR6eNz6yiyYtVSngsVV5O1qtNXpe",
	"AdPZcgkK2WVVfU0Fz5FaUYls84Qd+bEgUj2awvotx+hVZx+yT9L+iZ5D2RZzFUMu7rgtgvvZtQnWXUUW",
	"5BnpQmsyLJcKVZJXLl5iAURB8kgcG+kUYXd4JhJVkuji/u7XS9dWNHE6leknz0uQuwTSxGRvq2W1zw7g",
	"Nnmaog7q5BsqU0bb+7XKkvlwWNo1SdWapoKfym4ny3a14baAtZR1B1lX66H5/SCR7UCqEG1wHvYS9Tn7",
	"5bmCaSvIXgI8yDMk4qVyQ0HtVw5PighjrpbarC0ET2kGyAohmpMloFJkro0SKouMrB9tY+2GYkWQEXFs",
	"cWRp15KCxjrOO1bRmLPjqKsxq0P9bRd5YfpHmgCjSs+iwhmWzxBJqrrQVF/dUJw9VdsT721MHjiibT++",
	"e9gZDb4l7GyeeWPYWaWc7QNlKXfoxaUSaHF9e4d+mX9CH4mCZ7JGtyCeQKDfCmC/zD/psqMraZnnRKzr",
	"VYvr20Ulj7cI6k93209PIKQ9LbjytWq8AEYKqnuHK/1Klz61Msz0noJe03sVvDORxXaA1PVCW880gZ+S",
	"6uvvQZ1+tsPnuov3nfm05xhO94ePvu8fgvrtxjZgDUUGZbWT+aQ1U1VDK3srbkN2CerYWM5TM4DJajJf",
	"AZLVpU5iJ7OUZxl/loc8fAT1e1A30PJf3KSB9iXSFzcdW5He/sXMxju5xHUvdcYyx5XJGascNxy6lXQZ",
	"y234Sq7nHjZ27altollEtZzDqHUb0WlUbcDGsIfWPGXFKpX934rvsqLJyAdWLOty4DRe3XhvK5tMuUCk",
	"uR7hkSKU2ceq+ndYs07R77TimynqYub6zjIzt+hlPQV3k5GXmaJ6Bm2xgk7SIq/+yy50rblmScEpU60g",
	"oAwtthn7Cl3ccUSeOE3Q/eIzyszdEspoTpUh9fKyI/3XHH9z+nfc7G3e7IsnmJYtqttO2LM5/Zg7aje2",
	"dcHKUrY8P52Ys//ZnPHjPFGeCNIPEm1hdlDUa129HKXqg9xz03fyth08fgR9+xegJwncnaxcZFZXH2f5",
	"GyQoWr+JOXt98DN6XIMP1ReTTo7e53DvIu5nd7ldBvc9ztzd6anCYt4l7TOPiR7u9Ig3wyulilmvl+mX",
	"Ky7VbOJPfLx52PwvAAD//5CEZCYVHQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
